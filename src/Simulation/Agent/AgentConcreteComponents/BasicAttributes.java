package Simulation.Agent.AgentConcreteComponents;

import Simulation.Agent.AgentInterfaces.Attributes;

import java.awt.*;
import java.io.Serializable;
import java.util.Random;

public class BasicAttributes implements Attributes, Serializable {

    private double spawningWeight;
    private String name;
    private int code;
    private Color seedColor;
    private int mutationMagnitude;

    private int range; // Mutates
    private int size; // Mutates
    private int creationSize; // Mutates

    private int energyCapacity; // = 50 + size^0.85
    private int energyLostPerTurn; // = size^0.5
    private int eatAmount; // = size^0.5 * 2
    private int lifespan; // = 25 + size^1.1
    private int creationAge; // = lifespan / 5
    private int creationCost; // - (energyCapacity / 2) / creationSize
    private int creationDelay; // = size^0.5
    private Color mutatingColor = Color.white; // The color generated by the agents stats and seed color

    public BasicAttributes(double spawningWeight, String name, int code, Color seedColor, int mutationMagnitude, int range, int size, int creationSize) {
        this.spawningWeight = spawningWeight;
        this.code = code;
        this.name = name;
        this.mutationMagnitude = mutationMagnitude;
        this.seedColor = seedColor;

        this.range = range;
        this.size = size;
        this.creationSize = creationSize;

        // Calculate attributes that are based on other attributes
        this.energyCapacity = size*10;
        this.energyLostPerTurn = (int) Math.round(Math.pow(size, 0.70));
        this.eatAmount = (int) Math.round(Math.pow(size, 0.5)) * 2;
        this.lifespan = 25 + (int) Math.round(Math.pow(size, 1.1));
        this.creationAge = this.lifespan / 5;
        this.creationCost = (this.energyCapacity / 2) / creationSize;
        this.creationDelay = (int) Math.round(Math.pow(size, 0.5));

        if (mutationMagnitude > 0) {
            generateColor(
                    getSize() / 100.0,
                    getCreationSize() / 8.0,
                    getRange() / 5.0,
                    125);
        }
        else {
            Random random = new Random();
            seedColor = new Color(
                    overflow255(seedColor.getRed(), random.nextInt(50)),
                    overflow255(seedColor.getGreen(), random.nextInt(50)),
                    overflow255(seedColor.getBlue(), random.nextInt(50))
            );
        }

    }

    public BasicAttributes(Attributes attributesA, Attributes attributesB) {
        this.mutationMagnitude = attributesA.getMutationMagnitude();
        this.code =  attributesA.getCode(); // never mutates (for now?)
        this.name = attributesA.getName(); // Never mutates (for now?)
        this.spawningWeight = attributesA.getSpawningWeight();

        Random random = new Random();
        this.seedColor = (Color) getChoice(random, attributesA.getSeedColor(), attributesB.getSeedColor());
        this.mutatingColor = (Color) getChoice(random, attributesA.getMutatingColor(), attributesB.getMutatingColor());
        this.size = (int) getChoice(random, attributesA.getSize(), attributesB.getSize());
        this.creationSize = (int) getChoice(random, attributesA.getCreationSize(), attributesB.getCreationSize());
        this.range = (int) getChoice(random, attributesA.getRange(), attributesB.getRange());

        // Calculate attributes that are based on other attributes y\ =\ x^{2}-30y\ +\ 300
        this.energyCapacity = size*10;
        this.energyLostPerTurn = (int) Math.round(Math.pow(size, 0.7));
        this.eatAmount = (int) Math.round(Math.pow(size, 0.7)) * 2;
        this.lifespan = 25 + (int) Math.round(Math.pow(size, 1.1));
        this.creationAge = this.lifespan / 5;
        this.creationCost = (this.energyCapacity / 2) / creationSize;
        this.creationDelay = (int) Math.round(Math.pow(size, 0.5));

        seedColor = new Color(
                overflow255(seedColor.getRed(), random.nextInt(5)),
                overflow255(seedColor.getGreen(), random.nextInt(5)),
                overflow255(seedColor.getBlue(), random.nextInt(5))
        );
    }

    public void generateColor(double a, double b, double c, int constant) {
        int x2 = overflow255(getSeedColor().getRed(), ((int) (a * constant)));
        int y2 = overflow255(getSeedColor().getGreen(), ((int) (b * constant)));
        int z2 = overflow255(getSeedColor().getBlue(), ((int) (c * constant)));
        setMutatingColor(new Color(x2, y2, z2));
    }

    private static int add255(int p, int k) {
        return Math.max(Math.min(p + k, 255), 0);
    }

    private static int overflow255(int p, int k) {
        if (p + k > 255) {
            return p + k - 255;
        }
        else if (p + k < 0) {
            return 255 - p + k;
        }
        return p + k;
    }

    private static Object getChoice(Random random, Object attributeA, Object attributeB) {
        if (random.nextInt(2) > 0) {
            return attributeA;
        }
        return attributeB;
    }

    @Override
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public int getCode() {
        return code;
    }

    public void setCode(int code) {
        this.code = code;
    }

    @Override
    public Color getSeedColor() {
        return seedColor;
    }

    @Override
    public void setRange(int range) {
        this.range = Math.min(Math.max(size, 1), 6);
    }

    public void setSeedColor(Color seedColor) {
        this.seedColor = seedColor;
    }

    @Override
    public int getRange() {
        return range;
    }

    @Override
    public int getSize() {
        return size;
    }

    public void setSize(int size) {
        this.size = Math.min(Math.max(size, 1), 101);
    }

    public void setEnergyCapacity(int energyCapacity) {
        this.energyCapacity = energyCapacity;
    }

    @Override
    public int getLifespan() {
        return lifespan;
    }

    public void setLifespan(int lifespan) {
        this.lifespan = lifespan;
    }

    @Override
    public int getCreationAge() {
        return creationAge;
    }

    public void setCreationAge(int creationAge) {
        this.creationAge = creationAge;
    }

    @Override
    public int getCreationSize() {
        return creationSize;
    }

    public void setCreationSize(int creationSize) {
        this.creationSize = Math.min(Math.max(creationSize, 1), 9);
    }

    @Override
    public int getCreationDelay() {
        return creationDelay;
    }

    @Override
    public int getEnergyCapacity() {
        return energyCapacity;
    }

    @Override
    public int getEnergyLostPerTurn() {
        return energyLostPerTurn;
    }

    @Override
    public int getEatAmount() {
        return eatAmount;
    }

    @Override
    public int getCreationCost() {
        return creationCost;
    }

    public void setCreationDelay(int creationDelay) {
        this.creationDelay = creationDelay;
    }

    @Override
    public double getSpawningWeight() {
        return spawningWeight;
    }

    @Override
    public void setSpawningWeight(double spawningWeight) {
        this.spawningWeight = spawningWeight;
    }

    @Override
    public String toString() {
        return "BaseAttributes{" +
                "name='" + name + '\'' +
                ", code=" + code +
                ", color=" + seedColor +
                ", range=" + range +
                ", size=" + size +
                ", energyCapacity=" + energyCapacity +
                ", lifespan=" + lifespan +
                ", creationAge=" + creationAge +
                ", creationAmount=" + creationSize +
                ", creationDelay=" + creationDelay +
                '}';
    }


    @Override
    public int getMutationMagnitude() {
        return mutationMagnitude;
    }

    @Override
    public void setMutationMagnitude(int mutationMagnitude) {
        this.mutationMagnitude = mutationMagnitude;
    }

    @Override
    public Attributes copy() {
        return new BasicAttributes(
                getSpawningWeight(),
                getName(),
                getCode(),
                getSeedColor(),
                getMutationMagnitude(),
                getRange(),
                getSize(),
                getCreationSize());
    }

    @Override
    public Color getMutatingColor() {
        return mutatingColor;
    }

    public void setMutatingColor(Color mutatingColor) {
        this.mutatingColor = mutatingColor;
    }
}
